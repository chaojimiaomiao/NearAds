package icy.nearad;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import com.baixing.network.api.ApiConfiguration;import com.baixing.network.api.ApiError;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Bundle;import android.os.Looper;import android.util.Log;import icy.baixing.api.Api.ApiCallback;import icy.baixing.api.ApiAd;import icy.baixing.entity.Ad;import icy.baixing.entity.AdList;import icy.baixing.entity.Ad.EDATAKEYS;import icy.baixing.util.MyNetworkUtil;/** *  * @author zhaibingjie * */public class SplashCover extends Activity {	public static List<String> titleList;	public static List<String> contentList;	public static List<Double> degreeList;	public static List<Double> distanceList;	private double myLat, myLng;		public void onCreate(Bundle savedInstanceState){		super.onCreate(savedInstanceState);				titleList = new ArrayList<String>();		contentList = new ArrayList<String>();		degreeList = new ArrayList<Double>();		distanceList = new ArrayList<Double>();		//GlobalDataManager.getInstance().getNetworkCacheManager()		ApiConfiguration.config("www.baixing.com", null, "api_androidbaixing",                "c6dd9d408c0bcbeda381d42955e08a3f", "390", "89aece6589302559");				setContentView(R.layout.splash_mono);		int resource = choosePhoto();		findViewById(R.id.id_splash_cover).setBackgroundResource(resource);				getAdsByNetState();		Thread netThread = new Thread(new Runnable() {						@Override			public void run() {							}		});		netThread.start();	}		private void getAdsByNetState() {		boolean wifiConnect = MyNetworkUtil.isWifi(this);		if (wifiConnect) {			requestNetworkLocation();			//requestWIFILocation();			//getNearAds(myLat, myLng, 1000);//预加载1000m			return;		}		boolean gpsConnect = MyNetworkUtil.isGpsEnabled(this);		if (gpsConnect) {			requestGPSLocation();//在listener中获取			return;		}		boolean g3Connect = MyNetworkUtil.is3G(this);		if (g3Connect) {			requestNetworkLocation();			return;		}	}	/**	 * {"wifi_towers":[{"mac_address":"00:23:76:AC:41:5D","ssid":"Aspire-NETGEAR"}],"host":"maps.google.com","version":"1.1.0"}	 * {"location":{"latitude":23.129075,"longitude":113.264423,"accuracy":140000.0},"access_token":"2:WRr36ynOz_d9mbw5:pRErDAmJXI8l76MU"}	 */	private void requestWIFILocation() {		WifiManager wifiMan = (WifiManager) getSystemService(Context.WIFI_SERVICE);		WifiInfo info = wifiMan.getConnectionInfo();		String mac = info.getMacAddress();		String ssid = info.getSSID();		JSONObject wifi = new JSONObject();		try {			wifi.put("mac_address", mac);			wifi.put("ssid", ssid);		} catch (JSONException e) {			e.printStackTrace();		}		JSONArray array = new JSONArray();		array.put(wifi);		JSONObject object = createJSONObject("wifi_towers", array);		requestLocation(object);	}		private void requestLocation(JSONObject object) {		Log.e("", "requestLocation: " + object.toString());		HttpClient client = new DefaultHttpClient();		HttpPost post = new HttpPost("http://www.google.com/loc/json");		try {			StringEntity entity = new StringEntity(object.toString());			post.setEntity(entity);			HttpResponse response = client.execute(post);			HttpEntity entity2 = response.getEntity();			BufferedReader reader = new BufferedReader(new InputStreamReader(entity2.getContent()));			StringBuffer buffer = new StringBuffer();			String result = reader.readLine();			while (result != null) {				buffer.append(result);				result = reader.readLine();				Log.e("", "result: " + result);			}			Log.e("", "result: " + result);		} catch (Exception e) {			Log.e("", "except:" + e.toString());		}	}		private JSONObject createJSONObject(String arrayName, JSONArray array) {        JSONObject object = new JSONObject();        try {            object.put("version", "1.1.0");            object.put("host", "maps.google.com");            object.put(arrayName, array);        } catch (JSONException e) {        	Log.e("", "" + e.getMessage().toString());        }        return object;    }		private LocationListener listener = new LocationListener() {				@Override		public void onStatusChanged(String provider, int status, Bundle extras) {			// TODO Auto-generated method stub					}				@Override		public void onProviderEnabled(String provider) {			// TODO Auto-generated method stub					}				@Override		public void onProviderDisabled(String provider) {			// TODO Auto-generated method stub					}				@Override		public void onLocationChanged(Location location) {			if (titleList.size() == 0) {//只有第一次				myLat = location.getLatitude();				myLng = location.getLongitude();				getNearAds(myLat, myLng, 3000);			}		}	};	private void requestGPSLocation() {		LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000*60, 100, listener);	}	private void requestNetworkLocation() {		LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);		//Looper.prepare();		locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 1000*60, 100, listener);		//Looper.loop();	}		//获取网络数据	public void getNearAds(double latitude, double longitude, int distance) {		Log.e("", "lat: lng: " + latitude + longitude);		String latKey = "coordinate[lat]";		String lngKey = "coordinate[lng]";		String disKey = "coordinate[distance]";		Map<String, String> coordinateParams = new HashMap<String, String>();		coordinateParams.put(latKey, String.valueOf(latitude));		coordinateParams.put(lngKey, String.valueOf(longitude));		coordinateParams.put(disKey, String.valueOf(distance));		ApiAd.getAdsByGraph(this, new ApiCallback() {						@Override			public void handleSuccess(String apiName, Object result) {				//not ui thread				AdList adList = (AdList) result;				List<Ad> ads = adList.getData();				for (int i = 0; i < ads.size(); i++) {					titleList.add(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_TITLE));					contentList.add(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_DESCRIPTION));					double adLat = Double.parseDouble(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_LAT));					double adLon = Double.parseDouble(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_LON));					double degree = Math.atan2(adLon - myLng, adLat - myLat) * 180 / Math.PI;					//分三种情况					double adDegree;					if (degree <= 0) {						adDegree = 90 + Math.abs(degree);					} else if (degree <= 90 && degree > 0) {						adDegree = 90 - degree;					} else {						adDegree = 270 + (180 - degree);					}					degreeList.add(adDegree);//与北方的夹角,和传感器一致					double distance = getDistance(Double.parseDouble(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_LAT)), 					        Double.parseDouble(ads.get(i).getValueByKey(EDATAKEYS.EDATAKEYS_LON)));					distanceList.add(distance);				}				//initAdsOnScreen();				startMainActivity();			}			@Override			public void handleFail(String apiName, ApiError error) {				Log.e("", "fail: " + error.getMsg().toString());			}		}, "ershou", coordinateParams, 30);	}	public int choosePhoto() {		Random random=  new Random();		int i = random.nextInt(10) + 1;		switch (i) {		case 1:			return R.drawable.p1;		case 2:			return R.drawable.p2;		case 3:			return R.drawable.p3;		case 4:			return R.drawable.p4;		case 5:			return R.drawable.p5;		case 6:			return R.drawable.p6;		case 7:			return R.drawable.p7;		case 8:			return R.drawable.p8;		case 9:			return R.drawable.p9;		case 10:			return R.drawable.p10;		default:			return R.drawable.p1;		}	}	private void startMainActivity() {		Intent intent = new Intent();		intent.setClass(SplashCover.this, MainActivity.class);		startActivity(intent);		finish();	}		private final double EARTH_RADIUS = 6378.137;	private static double rad(double d)	{	   return d * Math.PI / 180.0;	}	/**	 * 根据经纬度计算两点距离	 */	public double getDistance(double lat2, double lng2)	{	   double radLat1 = rad(myLat);	   double radLat2 = rad(lat2);	   double a = radLat1 - radLat2;	   double b = rad(myLng) - rad(lng2);	   double s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) + 	    Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)));	   s = s * EARTH_RADIUS;	   s = Math.round(s * 10000) / 10000;	   return s;	}}